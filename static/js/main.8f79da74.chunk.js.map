{"version":3,"sources":["Components/Table.js","Provider/index.js","Components/FormFilterByName.js","Components/FormSortTable.js","Components/FormFilterByComparison.js","Services/api.js","Pages/MainPage.js","App/index.js","index.js"],"names":["Table","data","length","tableHeaders","Object","keys","headerMapping","str","renderTableRow","row","i","filter","cell","map","j","dataTestId","className","th","index","AppContext","createContext","Provider","children","useState","filterByName","name","filterByNumericValues","order","column","sort","filters","setFilters","value","useGlobalState","React","useContext","FormFilterByName","htmlFor","type","id","onChange","target","FormSortTable","state","setState","handleChange","e","onClick","FormFilterByComparison","filterOptions","setFilterOptions","comparison","currentFilter","setCurrentFilter","key","content","updatedFilterOptions","col","updatedFilterByNumericValues","el","removeFilter","a","fetch","header","json","rawData","results","fetchApi","MainPage","useEffect","then","res","dataSorted","b","sortString","Number","orbital_period","sortNumber","sortData","filteredData","forEach","greaterThanComparison","smallerThanComparison","equalsComparison","filterByComparison","planet","toLowerCase","includes","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f79da74.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Table({ data }) {\n  // Loading\n  if (data.length === 0) return <h1>Loading...</h1>;\n\n  // Carrega os valores do Header\n  const tableHeaders = Object.keys(data[0]);\n\n  // Mapping para consertar os nomes do Header\n  const headerMapping = (str) => {\n    switch (str) {\n    case 'name': return 'Name';\n    case 'rotation_period': return 'Rotation Period';\n    case 'orbital_period': return 'Orbital Period';\n    case 'diameter': return 'Diameter';\n    case 'climate': return 'Climate';\n    case 'gravity': return 'Gravity';\n    case 'terrain': return 'Terrain';\n    case 'surface_water': return 'Surface Water';\n    case 'population': return 'Population';\n    case 'films': return 'Films';\n    case 'created': return 'Created';\n    case 'edited': return 'Edited';\n    case 'url': return 'URL';\n    default: return str;\n    }\n  };\n\n  // Renderiza o Header\n  const renderTableHeader = () => (\n    <tr>\n      {\n        tableHeaders\n          .filter((th) => th !== 'residents')\n          .map((th, index) => (\n            <th\n              className=\"thead\"\n              key={ `th${index}` }\n            >\n              {headerMapping(th)}\n            </th>\n          ))\n      }\n    </tr>\n  );\n\n  // Renderiza as linhas da tabela\n  const renderTableRow = (row, i) => (\n    tableHeaders\n      .filter((cell) => cell !== 'residents')\n      .map((cell, j) => {\n        let dataTestId = false;\n        if (cell === 'name') dataTestId = 'planet-name';\n        return (\n          <td\n            data-testid={ dataTestId }\n            className=\"trbody\"\n            key={ `td-L${i}C${j}` }\n          >\n            {row[cell]}\n          </td>);\n      })\n  );\n\n  // Renderiza o corpo da tabela\n  const renderTableBody = () => (\n    data.map((row, i) => (\n      <tr key={ `tr${i}` }>\n        {\n          renderTableRow(row, i)\n        }\n      </tr>\n    ))\n  );\n\n  return (\n    <table className=\"table\">\n      <thead>\n        { renderTableHeader() }\n      </thead>\n      <tbody>\n        { renderTableBody() }\n      </tbody>\n    </table>\n  );\n}\n\nTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Table;\n","import React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// Criação do AppContext\nconst AppContext = createContext();\n\n// Criação do Provider\nconst Provider = ({ children }) => {\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [],\n    order: {\n      column: 'Name',\n      sort: 'ASC',\n    },\n  });\n\n  return (\n    <AppContext.Provider value={ { filters, setFilters } }>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Simplificação do uso posterior do useContext\nconst useGlobalState = () => React.useContext(AppContext);\n\nexport { Provider };\nexport { useGlobalState };\n\nProvider.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.Object),\n}.isRequired;\n","import React from 'react';\nimport { useGlobalState } from '../Provider';\n\nfunction FormFilterByName() {\n  const { filters, setFilters } = useGlobalState();\n\n  const handleChange = ({ target }) => {\n    setFilters({\n      ...filters,\n      filterByName: {\n        name: target.value,\n      },\n    });\n  };\n\n  return (\n    <form>\n      <label htmlFor=\"name-filter\">\n        Search Planet:\n        <input\n          type=\"text\"\n          id=\"name-filter\"\n          data-testid=\"name-filter\"\n          onChange={ handleChange }\n        />\n      </label>\n    </form>\n  );\n}\n\nexport default FormFilterByName;\n","import React, { useState } from 'react';\nimport { useGlobalState } from '../Provider';\n\nfunction FormSortTable() {\n  // Estados\n  const { filters, setFilters } = useGlobalState();\n  const [state, setState] = useState({\n    order: {\n      column: 'Name',\n      sort: 'ASC',\n    },\n  });\n\n  function handleClick() {\n    setFilters({\n      ...filters,\n      ...state,\n    });\n  }\n\n  const handleChange = (e, name, value) => {\n    if (!value) value = e.target.value;\n    setState({\n      order: {\n        ...state.order,\n        [name]: value,\n      },\n    });\n  };\n\n  return (\n    <form>\n\n      <select\n        data-testid=\"column-sort\"\n        onChange={ (e) => handleChange(e, 'column', false) }\n      >\n        <option value=\"Name\">Name</option>\n        <option value=\"orbital_period\">Orbital Period</option>\n      </select>\n\n      <label htmlFor=\"ASC\">\n        A ➡ Z\n        <input\n          // name=\"sort\"\n          data-testid=\"column-sort-input-asc\"\n          type=\"radio\"\n          onChange={ (e) => handleChange(e, 'sort', 'ASC') }\n        />\n      </label>\n\n      <label htmlFor=\"DESC\">\n        Z ➡ A\n        <input\n          // name=\"sort\"\n          data-testid=\"column-sort-input-desc\"\n          type=\"radio\"\n          onChange={ (e) => handleChange(e, 'sort', 'DESC') }\n        />\n      </label>\n\n      <button\n        data-testid=\"column-sort-button\"\n        type=\"button\"\n        onClick={ handleClick }\n      >\n        Sort\n      </button>\n\n    </form>\n  );\n}\n\nexport default FormSortTable;\n","import React, { useState } from 'react';\nimport { useGlobalState } from '../Provider';\n\nfunction FormFilterByComparison() {\n  // Estado Global\n  const { filters, setFilters } = useGlobalState();\n  const { filterByNumericValues } = filters;\n\n  // Estados Locais\n  const [filterOptions, setFilterOptions] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ]);\n  const [currentFilter, setCurrentFilter] = useState({\n    column: 'population',\n    comparison: 'maior que',\n    value: '0',\n  });\n\n  function handleChange({ target: { value } }, key) {\n    setCurrentFilter({\n      ...currentFilter,\n      [key]: value,\n    });\n  }\n\n  function handleClick() {\n    // Envia ao Estdo Global\n    setFilters({\n      ...filters,\n      filterByNumericValues: [...filters.filterByNumericValues, currentFilter],\n    });\n\n    // Retira a opcao usada e salva no estado local\n    const updatedFilterOptions = filterOptions.filter((col) => (\n      col !== currentFilter.column\n    ));\n    setFilterOptions(updatedFilterOptions);\n\n    // Atualiza o filtro atual para a nova opcao\n    setCurrentFilter({\n      ...currentFilter,\n      column: updatedFilterOptions[0],\n    });\n  }\n\n  const removeFilter = ({ target: { id } }) => {\n    // Atualiza a lista de filtros disponiveis\n    setFilterOptions([\n      ...filterOptions,\n      id,\n    ]);\n\n    // Atualiza o Estado Global\n    const updatedFilterByNumericValues = filterByNumericValues\n      .filter((el) => el.column !== id);\n    setFilters({\n      ...filters,\n      filterByNumericValues: updatedFilterByNumericValues,\n    });\n  };\n\n  const renderOptions = () => (\n    filterOptions.map((content, index) => (\n      <option key={ index }>{content}</option>\n    ))\n  );\n\n  const renderFilters = () => (\n    filterByNumericValues.map((value, index) => (\n      <div data-testid=\"filter\" key={ index }>\n        <span>{ `${value.column} ` }</span>\n        <span>{ `${value.comparison} ` }</span>\n        <span>{ `${value.value} ` }</span>\n        <button\n          id={ value.column }\n          onClick={ (e) => removeFilter(e) }\n          type=\"button\"\n        >\n          X\n        </button>\n      </div>\n    ))\n  );\n\n  return (\n    <form>\n\n      <select\n        onChange={ (e) => handleChange(e, 'column') }\n        data-testid=\"column-filter\"\n      >\n        { renderOptions() }\n      </select>\n\n      <select\n        onChange={ (e) => handleChange(e, 'comparison') }\n        data-testid=\"comparison-filter\"\n      >\n        <option>maior que</option>\n        <option>menor que</option>\n        <option>igual a</option>\n      </select>\n\n      <input\n        onChange={ (e) => handleChange(e, 'value') }\n        type=\"number\"\n        data-testid=\"value-filter\"\n      />\n\n      <button\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={ handleClick }\n      >\n        Filter\n      </button>\n\n      { renderFilters() }\n\n    </form>\n  );\n}\n\nexport default FormFilterByComparison;\n","async function fetchApi() {\n  const header = await fetch('https://swapi-trybe.herokuapp.com/api/planets/');\n  const rawData = await header.json();\n  const { results } = rawData;\n  return results;\n}\n\nexport default fetchApi;\n","import React, { useEffect, useState } from 'react';\nimport Table from '../Components/Table';\nimport { useGlobalState } from '../Provider';\nimport FormFilterByName from '../Components/FormFilterByName';\nimport FormSortTable from '../Components/FormSortTable';\nimport FormFilterByComparison from '../Components/FormFilterByComparison';\nimport fetchApi from '../Services/api';\n\nfunction MainPage() {\n  const [state, setState] = useState([]);\n  const { filters } = useGlobalState();\n  const { filterByName: { name }, filterByNumericValues, order } = filters;\n  const minusOne = -1;\n\n  useEffect(() => {\n    fetchApi().then((res) => setState(res));\n  }, []);\n\n  function filterByName(data) {\n    if (!name) return data;\n    const filteredData = data.filter((planet) => (\n      planet.name.toLowerCase().includes(name.toLowerCase())\n    ));\n    return filteredData;\n  }\n\n  function filterByComparison(data) {\n    if (filterByNumericValues.length <= 0) return data;\n    let filteredData = [...data];\n    filterByNumericValues.forEach((filter) => {\n      const { column, comparison, value } = filter;\n      filteredData = filteredData.filter((row) => {\n        const greaterThanComparison = Number(row[column]) > Number(value);\n        const smallerThanComparison = Number(row[column]) < Number(value);\n        const equalsComparison = Number(row[column]) === Number(value);\n        const cond1 = comparison === 'maior que' && greaterThanComparison;\n        const cond2 = comparison === 'menor que' && smallerThanComparison;\n        const cond3 = comparison === 'igual a' && equalsComparison;\n        return cond1 || cond2 || cond3;\n      });\n    });\n    return filteredData;\n  }\n\n  function sortString(data) {\n    if (order.sort === 'ASC') {\n      return data.sort((a, b) => {\n        if (a.name < b.name) return minusOne;\n        if (a.name > b.name) return 1;\n        return 0;\n      });\n    }\n    return data.sort((a, b) => {\n      if (a.name < b.name) return 1;\n      if (a.name > b.name) return minusOne;\n      return 0;\n    });\n  }\n\n  function sortNumber(data) {\n    if (order.sort === 'ASC') {\n      return data.sort((a, b) => Number(a.orbital_period) - Number(b.orbital_period));\n    }\n    return data.sort((a, b) => Number(b.orbital_period) - Number(a.orbital_period));\n  }\n\n  function sortData(data) {\n    if (order.column === 'Name') return sortString(data);\n    return sortNumber(data);\n  }\n\n  const dataFilteredByName = filterByName(state);\n  const dataFilteredByComp = filterByComparison(dataFilteredByName);\n  const dataSorted = sortData(dataFilteredByComp);\n\n  return (\n    <div>\n      <FormFilterByName />\n      <FormSortTable />\n      <FormFilterByComparison />\n      <Table data={ dataSorted } />\n    </div>\n  );\n}\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from '../Pages/MainPage';\nimport { Provider } from '../Provider';\n\nfunction App() {\n  return (\n    <Provider>\n      <MainPage />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}